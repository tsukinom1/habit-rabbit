// Service Worker –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const CACHE_NAME = 'habit-rabbit-v1'

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
  console.log('SW: Installing...')
  self.skipWaiting()
})

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('SW: Activating...')
  event.waitUntil(self.clients.claim())
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('push', (event) => {
  console.log('SW: Push received', event)
  
  if (!event.data) {
    console.log('SW: No data in push event')
    return
  }

  try {
    const data = event.data.json()
    console.log('SW: Push data:', data)
    
    const options = {
      body: data.body,
      icon: '/images/poster.png',
      badge: '/images/poster.png',
      data: data.data || {},
      actions: getNotificationActions(data.type),
      requireInteraction: data.type === 'STREAK_WARNING', // –¢—Ä–µ–±—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö
      tag: data.tag || data.type, // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }

    // –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    switch (data.type) {
      case 'DAILY_GREETING':
        options.icon = '/images/poster.png'
        break
      case 'HABIT_REMINDER':
        options.icon = '/images/poster.png'
        options.actions = [
          { action: 'mark_done', title: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' },
          { action: 'snooze', title: '‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å' }
        ]
        break
      case 'STREAK_WARNING':
        options.icon = '/images/poster.png'
        options.requireInteraction = true
        break
      case 'ACHIEVEMENT':
        options.icon = '/images/poster.png'
        break
      case 'WEEKLY_SUMMARY':
        options.icon = '/images/poster.png'
        break
    }

    event.waitUntil(
      self.registration.showNotification(data.title, options)
    )
  } catch (error) {
    console.error('SW: Error processing push:', error)
  }
})

// –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function getNotificationActions(type) {
  switch (type) {
    case 'HABIT_REMINDER':
      return [
        { action: 'mark_done', title: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' },
        { action: 'snooze', title: '‚è∞ –ü–æ–∑–∂–µ' }
      ]
    case 'STREAK_WARNING':
      return [
        { action: 'open_app', title: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' }
      ]
    case 'WEEKLY_SUMMARY':
      return [
        { action: 'view_stats', title: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' }
      ]
    default:
      return []
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
  console.log('SW: Notification clicked', event)
  
  event.notification.close()
  
  const action = event.action
  const data = event.notification.data || {}
  
  event.waitUntil(
    handleNotificationClick(action, data)
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
async function handleNotificationClick(action, data) {
  const clients = await self.clients.matchAll({
    type: 'window',
    includeUncontrolled: true
  })

  switch (action) {
    case 'mark_done':
      // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
      if (data.habitId) {
        await markHabitDone(data.habitId)
      }
      break
      
    case 'snooze':
      // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —á–∞—Å
      if (data.habitId) {
        await snoozeReminder(data.habitId)
      }
      break
      
    case 'open_app':
    case 'view_stats':
    default:
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      if (clients.length > 0) {
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É
        await clients[0].focus()
        if (data.url) {
          await clients[0].navigate(data.url)
        }
      } else {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        const url = data.url || '/'
        await self.clients.openWindow(url)
      }
      break
  }
}

// –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
async function markHabitDone(habitId) {
  try {
    const response = await fetch(`/api/habits/${habitId}/entries`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        date: new Date().toISOString(),
        isCompleted: true,
        source: 'notification'
      }),
    })
    
    if (response.ok) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      await self.registration.showNotification('‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞!', {
        body: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!',
        icon: '/images/poster.png',
        tag: 'success'
      })
    }
  } catch (error) {
    console.error('SW: Error marking habit done:', error)
  }
}

// –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async function snoozeReminder(habitId) {
  try {
    await fetch('/api/notifications/snooze', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        habitId,
        snoozeMinutes: 60
      }),
    })
    
    await self.registration.showNotification('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ', {
      body: '–ù–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ —á–∞—Å!',
      icon: '/icons/default-avatar.png',
      tag: 'snooze'
    })
  } catch (error) {
    console.error('SW: Error snoozing reminder:', error)
  }
} 