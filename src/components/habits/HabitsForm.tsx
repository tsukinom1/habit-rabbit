'use client'
import { useForm } from 'react-hook-form'
import MyInput from '../ui/MyInput'
import MySelect from '../ui/MySelect'
import MyToggle from '../ui/MyToggle'
import MyButton from '../ui/MyButton'
import { THabit } from '@/types/habit'
import { useHabit } from '@/hooks/useHabit'
import MyTextarea from '../ui/MyTextarea'
import { FaTimes } from 'react-icons/fa'
import { useEffect } from 'react'
import { useRouter } from 'next/navigation'

interface HabitsFormProps {
    editingHabit?: THabit | null
    mode?: 'create' | 'edit'
}

export default function HabitsForm({ editingHabit, mode = 'create' }: HabitsFormProps) {
    const router = useRouter()
    const { createHabit, updateHabit } = useHabit()
    const { register, handleSubmit, reset, setValue, watch } = useForm()

    // –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫
    const iconMapping = {
        'üèãÔ∏è': 'fitness',
        'üíß': 'nutrition',
        'üçé': 'fruit',
        'ü•ó': 'healthy-food',
        'üíä': 'vitamins',
        '‚úÖ': 'task',
        'üéØ': 'focus',
        '‚è∞': 'time',
        'üìã': 'plan',
        'üìö': 'book',
        'üìñ': 'study',
        'üó£Ô∏è': 'language',
        '‚úçÔ∏è': 'write',
        'üò¥': 'sleep',
        'üßò‚Äç‚ôÄÔ∏è': 'meditation',
        'üå≥': 'nature',
        'üòä': 'smile',
        'üé®': 'art',
        'üéµ': 'music',
        'üì∏': 'photo',
        'üë®‚Äçüë©‚Äçüëß‚Äçüë¶': 'family',
        'üë•': 'friends',
        'üìû': 'call',
        'üí∞': 'save',
        'üìä': 'budget',
        'üßπ': 'clean',
        'üç≥': 'cook'
    }

    const reverseIconMapping = Object.fromEntries(
        Object.entries(iconMapping).map(([emoji, value]) => [value, emoji])
    )

    // –ú–∞–ø–ø–∏–Ω–≥ —Ü–≤–µ—Ç–æ–≤
    const colorMapping = {
        '#22c55e': 'green',
        '#3b82f6': 'blue',
        '#eab308': 'yellow',
        '#a855f7': 'purple',
        '#f97316': 'orange',
        '#ec4899': 'pink'
    }

    const reverseColorMapping = {
        'green': '#22c55e',
        'blue': '#3b82f6',
        'yellow': '#eab308',
        'purple': '#a855f7',
        'orange': '#f97316',
        'pink': '#ec4899'
    }

    // Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const habitToFormData = (habit: THabit) => ({
        title: habit.title,
        description: habit.description || '',
        icon: iconMapping[habit.icon as keyof typeof iconMapping] || 'focus',
        color: colorMapping[habit.color as keyof typeof colorMapping] || 'blue',
        frequency: habit.frequency,
        targetValue: habit.targetValue,
        unit: habit.unit || '',
        reminderTime: habit.reminderTime || '',
        startDate: habit.startDate ? new Date(habit.startDate).toISOString().split('T')[0] : '',
        endDate: habit.endDate ? new Date(habit.endDate).toISOString().split('T')[0] : '',
        isActive: habit.isActive,
        isArchived: habit.isArchived
    })

    // Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –≤ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    const formDataToHabit = (data: any) => ({
        ...data,
        icon: reverseIconMapping[data.icon as keyof typeof reverseIconMapping] || 'üéØ',
        color: reverseColorMapping[data.color as keyof typeof reverseColorMapping] || '#3b82f6'
    })


    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        if (mode === 'edit' && editingHabit) {
            reset(habitToFormData(editingHabit))
        }
    }, [mode, editingHabit, reset])

    const onSubmit = async (data: Partial<THabit>) => {
        try {
            const processedData = formDataToHabit(data)

            if (mode === 'edit' && editingHabit) {
                await updateHabit(editingHabit.id, processedData)
                router.push(`/habits/${editingHabit.id}`)
            } else {
                const newHabit = await createHabit(processedData)
                router.push(`/habits/${newHabit.id}`)
            }
            reset()
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏:', error)
        }
    }

    return (
        <form onSubmit={handleSubmit(onSubmit)} className='border p-4 rounded-lg shadow-lg'>
            <h1 className='text-4xl font-bold ml-2 text-center border-b border-gray-300 pb-2'>Habit Rabbit</h1>
            <div className='flex justify-between items-end my-4'>
                <h1 className='text-2xl font-bold ml-2'>
                    {mode === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏' : '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏'}
                </h1>
                <FaTimes
                    size={30}
                    onClick={() => router.back()}
                    className='cursor-pointer'
                />
            </div>

            <div className='grid md:grid-cols-2 gap-2'>
                <div className='space-y-2'>
                    <MyInput label='–ù–∞–∑–≤–∞–Ω–∏–µ' type='text' placeholder='–ù–∞–∑–≤–∞–Ω–∏–µ'
                        {...register('title',
                            {
                                required: {
                                    value: true,
                                    message: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                                },
                                maxLength: {
                                    value: 30,
                                    message: '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤'
                                }
                            }
                        )} />

                    <MySelect label='–ò–∫–æ–Ω–∫–∞' placeholder='–ò–∫–æ–Ω–∫–∞'
                        options={[
                            { value: 'fitness', label: 'üèãÔ∏è –°–ø–æ—Ä—Ç–∑–∞–ª' },

                            { value: 'nutrition', label: 'üíß –í–æ–¥–∞' },
                            { value: 'fruit', label: 'üçé –§—Ä—É–∫—Ç—ã' },
                            { value: 'healthy-food', label: 'ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ' },
                            { value: 'vitamins', label: 'üíä –í–∏—Ç–∞–º–∏–Ω—ã' },

                            // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                            { value: 'task', label: '‚úÖ –ó–∞–¥–∞—á–∏' },
                            { value: 'focus', label: 'üéØ –§–æ–∫—É—Å' },
                            { value: 'time', label: '‚è∞ –í—Ä–µ–º—è' },
                            { value: 'plan', label: 'üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' },

                            // –û–±—É—á–µ–Ω–∏–µ
                            { value: 'book', label: 'üìö –ß—Ç–µ–Ω–∏–µ' },
                            { value: 'study', label: 'üìñ –ò–∑—É—á–µ–Ω–∏–µ' },
                            { value: 'language', label: 'üó£Ô∏è –Ø–∑—ã–∫–∏' },
                            { value: 'write', label: '‚úçÔ∏è –ü–∏—Å—å–º–æ' },

                            // –ó–¥–æ—Ä–æ–≤—å–µ
                            { value: 'sleep', label: 'üò¥ –°–æ–Ω' },
                            { value: 'meditation', label: 'üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏—è' },
                            { value: 'nature', label: 'üå≥ –ü—Ä–∏—Ä–æ–¥–∞' },
                            { value: 'smile', label: 'üòä –ü–æ–∑–∏—Ç–∏–≤' },

                            // –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ
                            { value: 'art', label: 'üé® –†–∏—Å–æ–≤–∞–Ω–∏–µ' },
                            { value: 'music', label: 'üéµ –ú—É–∑—ã–∫–∞' },
                            { value: 'photo', label: 'üì∏ –§–æ—Ç–æ' },

                            // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
                            { value: 'family', label: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è' },
                            { value: 'friends', label: 'üë• –î—Ä—É–∑—å—è' },
                            { value: 'call', label: 'üìû –ó–≤–æ–Ω–∫–∏' },

                            // –§–∏–Ω–∞–Ω—Å—ã
                            { value: 'save', label: 'üí∞ –°–±–µ—Ä–µ–∂–µ–Ω–∏—è' },
                            { value: 'budget', label: 'üìä –ë—é–¥–∂–µ—Ç' },

                            // –î–æ–º
                            { value: 'clean', label: 'üßπ –£–±–æ—Ä–∫–∞' },
                            { value: 'cook', label: 'üç≥ –ì–æ—Ç–æ–≤–∫–∞' },
                        ]}
                        {...register('icon')}
                    />
                </div>

                <MyTextarea label='–û–ø–∏—Å–∞–Ω–∏–µ' placeholder='–û–ø–∏—Å–∞–Ω–∏–µ' rows={4} {...register('description', {
                    maxLength: {
                        value: 250,
                        message: '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 250 —Å–∏–º–≤–æ–ª–æ–≤'
                    }
                })} />

                <MySelect label='–¶–≤–µ—Ç' placeholder='–¶–≤–µ—Ç'
                    options={[
                        { value: 'green', label: '–ó–µ–ª—ë–Ω—ã–π' },
                        { value: 'blue', label: '–°–∏–Ω–∏–π' },
                        { value: 'yellow', label: '–ñ—ë–ª—Ç—ã–π' },
                        { value: 'purple', label: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π' },
                        { value: 'orange', label: '–û—Ä–∞–Ω–∂–µ–≤—ã–π' },
                        { value: 'pink', label: '–†–æ–∑–æ–≤—ã–π' },
                    ]}
                    {...register('color')}
                />

                <MySelect label='–ß–∞—Å—Ç–æ—Ç–∞' placeholder='–ß–∞—Å—Ç–æ—Ç–∞'
                    options={[
                        { value: 'DAILY', label: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ' },
                        { value: 'WEEKLY', label: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ' },
                        { value: 'MONTHLY', label: '–ï–∂–µ–º–µ—Å—è—á–Ω–æ' },
                        { value: 'CUSTOM', label: '–î—Ä—É–≥–æ–µ' }]}
                    {...register('frequency', {
                        required: {
                            value: true,
                            message: '–ß–∞—Å—Ç–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
                        }
                    })} />

                <MyInput label='–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ' type='number' placeholder='–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ' {...register('targetValue', {
                    required: {
                        value: true,
                        message: '–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ü–∏—Ñ—Ä–∞—Ö'
                    }
                })} />


                <MySelect label='–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è' placeholder='–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è'
                    options={[
                        { value: 'count', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' },
                        { value: 'minutes', label: '–ú–∏–Ω—É—Ç—ã' },
                        { value: 'hours', label: '–ß–∞—Å—ã' },
                        { value: 'days', label: '–î–Ω–∏' },
                        { value: 'months', label: '–ú–µ—Å—è—Ü—ã' },
                        { value: 'meters', label: '–ú–µ—Ç—Ä—ã' },
                        { value: 'kilometers', label: '–ö–∏–ª–æ–º–µ—Ç—Ä—ã' },
                        { value: 'items', label: '–®—Ç—É–∫–∏' },
                        { value: 'percent', label: '–ü—Ä–æ—Ü–µ–Ω—Ç—ã' },
                        { value: 'other', label: '–î—Ä—É–≥–æ–µ' },
                    ]}

                    {...register('unit', {
                    })}
                />


                <MyInput 
                    label='–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' 
                    type='time' 
                    placeholder='HH:MM' 
                    {...register('reminderTime')} 
                />

                <MyInput label='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞' type='date' placeholder='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞' {...register('startDate', {
                    required: {
                        value: true,
                        message: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
                    }
                })} />
                <MyInput label='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è' type='date' placeholder='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è' {...register('endDate')} />

                <div className='flex'>

                    <MyToggle
                        label='–ê–∫—Ç–∏–≤–Ω–∞—è'
                        {...register('isActive')}
                    />
                    <MyToggle
                        label='–ê—Ä—Ö–∏–≤–Ω–∞—è'
                        {...register('isArchived')}
                    />
                </div>
            </div>

            <div className='flex justify-center items-center my-4 gap-4'>
                <MyButton type='submit' className='py-2 bg-blue-500 text-white'>
                    {mode === 'edit' ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
                </MyButton>
                <MyButton
                    type='button'
                    className='py-2 bg-red-500 text-white'
                    onClick={() => router.back()}
                >
                    –û—Ç–º–µ–Ω–∞
                </MyButton>
            </div>
        </form>
    )
}
