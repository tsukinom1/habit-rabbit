'use client'
import { useForm, useWatch } from 'react-hook-form'
import MyInput from '../ui/MyInput'
import MySelect from '../ui/MySelect'
import MyButton from '../ui/MyButton'
import MyTextarea from '../ui/MyTextarea'
import { THabitEntry, THabit } from '@/types/habit'
import useHabitEntry from '@/hooks/useHabitEntry'
import { FaTimes } from 'react-icons/fa'
import { useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { notify } from '@/hooks/useNotification'
import { getUnitText, formatValueWithUnit } from '@/utils/habitHelpers'

interface HabitEntryFormProps {
    habitId: string
    editingEntry?: THabitEntry | null
    mode?: 'create' | 'edit'
    onClose?: () => void
    onEntryUpdate?: () => Promise<void> // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∏
    currentHabit?: THabit // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∫–∞–∫ –ø—Ä–æ–ø
    selectedDate?: Date | null // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
}

export default function HabitEntryForm({
    habitId,
    editingEntry,
    mode = 'create',
    onClose,
    onEntryUpdate,
    currentHabit,
    selectedDate = null
}: HabitEntryFormProps) {
    const router = useRouter()
    const { createHabitEntry, updateHabitEntry } = useHabitEntry(habitId)

    const { register, handleSubmit, reset, control, formState: { isSubmitting } } = useForm({
        defaultValues: {
            date: new Date().toISOString().split('T')[0], // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            value: currentHabit?.targetValue || 1,
            note: '',
            mood: 'NEUTRAL'
        }
    })

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª–µ value –¥–ª—è real-time –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const watchedValue = useWatch({ control, name: 'value' })

    // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const moodOptions = [
        { value: 'TERRIBLE', label: 'üòû –£–∂–∞—Å–Ω–æ' },
        { value: 'BAD', label: 'üòï –ü–ª–æ—Ö–æ' },
        { value: 'NEUTRAL', label: 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ' },
        { value: 'GOOD', label: 'üòä –•–æ—Ä–æ—à–æ' },
        { value: 'EXCELLENT', label: 'üòÉ –û—Ç–ª–∏—á–Ω–æ' }
    ]

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
    useEffect(() => {
        if (currentHabit && mode === 'create') {
            const dateToUse = selectedDate 
                ? selectedDate.toISOString().split('T')[0] 
                : new Date().toISOString().split('T')[0]
                
            reset({
                date: dateToUse,
                value: currentHabit.targetValue || 1,
                note: '',
                mood: 'NEUTRAL'
            })
        }
    }, [currentHabit, mode, reset, selectedDate])

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        if (mode === 'edit' && editingEntry) {
            reset({
                date: new Date(editingEntry.date).toISOString().split('T')[0],
                value: editingEntry.value,
                note: editingEntry.note || '',
                mood: editingEntry.mood
            })
        }
    }, [mode, editingEntry, reset])

    const onSubmit = async (data: any) => {
        try {
            const entryData = {
                date: data.date, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è API
                value: Number(data.value),
                note: data.note,
                mood: data.mood
            }

            if (mode === 'edit' && editingEntry) {
                await updateHabitEntry(habitId, editingEntry.id, entryData)
            } else {
                await createHabitEntry(habitId, entryData)
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            if (onEntryUpdate) {
                await onEntryUpdate()
            }

            reset()

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
            if (onClose) {
                onClose()
            } else {
                router.back()
            }
        } catch (error) {
            notify.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏')
        }
    }

    const handleCancel = () => {
        if (onClose) {
            onClose()
        } else {
            router.back()
        }
    }

    return (
        <div className='border p-4 rounded-lg shadow-lg bg-white'>
            <div className='flex justify-between items-center mb-4'>
                <h2 className='text-xl font-bold'>
                    {mode === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏' : '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–≤—ã—á–∫–∏'}
                </h2>
                <FaTimes
                    size={24}
                    onClick={handleCancel}
                    className='cursor-pointer text-gray-500 hover:text-gray-700'
                />
            </div>

            <form onSubmit={handleSubmit(onSubmit)} className='space-y-4'>
                <div className='grid md:grid-cols-2 gap-4'>
                    {/* –î–∞—Ç–∞ */}
                    <MyInput
                        label='–î–∞—Ç–∞'
                        type='date'
                        placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'
                        {...register('date', {
                            required: {
                                value: true,
                                message: '–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
                            }
                        })}
                    />

                    {/* –ó–Ω–∞—á–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º */}
                    <div>
                        <MyInput
                            label={currentHabit ? 
                                `–ó–Ω–∞—á–µ–Ω–∏–µ (${getUnitText(currentHabit.unit)})` + 
                                (currentHabit.targetValue ? ` ‚Äî —Ü–µ–ª—å: ${currentHabit.targetValue}` : '') 
                                : '–ó–Ω–∞—á–µ–Ω–∏–µ'
                            }
                            type='number'
                            min='0'
                            step='0.1'
                            placeholder={currentHabit?.targetValue ? 
                                `–í–≤–µ–¥–∏—Ç–µ –æ—Ç 0 –¥–æ ${currentHabit.targetValue}` : 
                                '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
                            }
                            {...register('value', {
                                required: {
                                    value: true,
                                    message: '–ó–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                                },
                                min: {
                                    value: 0,
                                    message: '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º'
                                }
                            })}
                        />
                        
                        {/* Real-time –ø—Ä–æ–≥—Ä–µ—Å—Å */}
                        {currentHabit?.targetValue && currentHabit.targetValue > 0 && watchedValue && (
                            <div className='mt-2 space-y-1'>
                                <div className='flex justify-between text-sm'>
                                    <span className='text-gray-600'>
                                        {watchedValue} –∏–∑ {currentHabit.targetValue} {getUnitText(currentHabit.unit)}
                                    </span>
                                    <span className={`font-medium ${Number(watchedValue) >= currentHabit.targetValue ? 'text-green-600' : 'text-gray-600'}`}>
                                        {Math.round((Number(watchedValue) / currentHabit.targetValue) * 100)}%
                                    </span>
                                </div>
                                <div className='w-full h-2 bg-gray-200 rounded-full overflow-hidden'>
                                    <div 
                                        className='h-full transition-all duration-300'
                                        style={{ 
                                            width: `${Math.min((Number(watchedValue) / currentHabit.targetValue) * 100, 100)}%`,
                                            backgroundColor: Number(watchedValue) >= currentHabit.targetValue ? '#16a34a' : currentHabit.color || '#3b82f6'
                                        }}
                                    />
                                </div>
                                {Number(watchedValue) >= currentHabit.targetValue && (
                                    <div className='text-sm text-green-600 font-medium'>
                                        üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!
                                    </div>
                                )}
                            </div>
                        )}
                    </div>

                    {/* –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ */}
                    <MySelect
                        label='–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
                        placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
                        options={moodOptions}
                        {...register('mood', {
                            required: {
                                value: true,
                                message: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                            }
                        })}
                    />
                </div>

                {/* –ó–∞–º–µ—Ç–∫–∞ */}
                <MyTextarea
                    label='–ó–∞–º–µ—Ç–∫–∞'
                    placeholder='–û–ø–∏—à–∏—Ç–µ –∫–∞–∫ –ø—Ä–æ—à–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏...'
                    rows={4}
                    {...register('note', {
                        maxLength: {
                            value: 500,
                            message: '–ó–∞–º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤'
                        }
                    })}
                />

                {/* –ö–Ω–æ–ø–∫–∏ */}
                <div className='flex justify-end gap-3 pt-4'>
                    <MyButton
                        type='button'
                        className='px-4 py-2 bg-gray-500 text-white hover:bg-gray-600'
                        onClick={handleCancel}
                    >
                        –û—Ç–º–µ–Ω–∞
                    </MyButton>
                    <MyButton
                        type='submit'
                        className='px-4 py-2 bg-blue-500 text-white hover:bg-blue-600'
                    >
                        {isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (mode === 'edit' ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å')}
                    </MyButton>
                </div>
            </form>
        </div>
    )
}
