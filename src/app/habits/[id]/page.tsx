'use client'
import React, { useState, useEffect } from 'react'
import { FaCalendarAlt, FaCircle, FaClock, FaStickyNote, FaEdit, FaTrash } from 'react-icons/fa'
import { useParams, useRouter } from 'next/navigation'
import { useHabit } from '@/hooks/useHabit'
import Loader from '@/components/ui/Loader'
import Link from 'next/link'
import { getFrequencyText, getTargetText, getActiveStatusText, getPeriodText, formatDisplayDate, calculateProgress, isGoalCompleted, getProgressColor, getProgressBgColor, getCompletionStatusText, formatValueWithUnit, getUnitText, getMoodText, isHabitCompletedToday, isHabitFullyCompletedToday, getLastHabitEntry, getStreakStatus, getMotivationMessage } from '@/utils/habitHelpers'
import MyButton from '@/components/ui/MyButton'
import HabitEntryForm from '@/components/habits/HabitEntryForm'
import HabitCalendar from '@/components/habits/HabitCalendar'
import useHabitCalendar from '@/hooks/useHabitCalendar'
import useHabitEntry from '@/hooks/useHabitEntry'
import { TCalendarDay, THabitEntry } from '@/types/habit'

export default function HabitPage() {
    const { id } = useParams()
    const { currentHabit, currentHabitLoading, habitError, refreshCurrentHabit, recalculateStreaks } = useHabit(id as string)
    const router = useRouter()

    const [isCreateEntry, setIsCreateEntry] = useState(false)
    const [hasRecalculated, setHasRecalculated] = useState(false)
    const [selectedDate, setSelectedDate] = useState<Date | null>(null)
    const [deleteConfirm, setDeleteConfirm] = useState<{
        isOpen: boolean
        entry: THabitEntry | null
    }>({ isOpen: false, entry: null })

    // –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ö—É–∫
    const {
        calendarData,
        monthStats,
        loading: calendarLoading,
        error: calendarError,
        config: calendarConfig,
        updateConfig: updateCalendarConfig,
        refreshCalendarData
    } = useHabitCalendar({
        habitId: id as string,
        autoLoad: true,
        config: {
            showMood: true,
            colorScheme: 'green',
            showStreaks: true,
            startWeekOn: 'monday'
        }
    })

    // –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –ø—Ä–∏–≤—ã—á–µ–∫
    const { deleteHabitEntry } = useHabitEntry(id as string)


    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç streak –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        if (currentHabit && !hasRecalculated) {
            recalculateStreaks()
            setHasRecalculated(true)
        }
    }, [currentHabit, hasRecalculated, recalculateStreaks])

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const handleCalendarDayClick = (day: TCalendarDay) => {
        setSelectedDate(day.date)
        setIsCreateEntry(true)
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    const handleEntryUpdate = async () => {
        await refreshCurrentHabit()
        await refreshCalendarData()
        setIsCreateEntry(false)
        setSelectedDate(null)
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    const handleDeleteEntry = (entry: THabitEntry) => {
        setDeleteConfirm({ isOpen: true, entry })
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    const confirmDeleteEntry = async () => {
        if (!deleteConfirm.entry || !currentHabit) return

        try {
            await deleteHabitEntry(currentHabit.id, deleteConfirm.entry.id)
            await refreshCurrentHabit()
            await refreshCalendarData()
            setDeleteConfirm({ isOpen: false, entry: null })
        } catch (error) {
            // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ö—É–∫–µ
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error)
        }
    }

    // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    const cancelDeleteEntry = () => {
        setDeleteConfirm({ isOpen: false, entry: null })
    }
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const getMoodEmoji = (mood: string) => {
        switch (mood) {
            case 'TERRIBLE': return 'üòû'
            case 'BAD': return 'üòï'
            case 'NEUTRAL': return 'üòê'
            case 'GOOD': return 'üòä'
            case 'EXCELLENT': return 'üòÉ'
            default: return 'üòê'
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const getMoodColor = (mood: string) => {
        switch (mood) {
            case 'TERRIBLE': return 'text-red-600'
            case 'BAD': return 'text-orange-600'
            case 'NEUTRAL': return 'text-gray-600'
            case 'GOOD': return 'text-green-600'
            case 'EXCELLENT': return 'text-emerald-600'
            default: return 'text-gray-600'
        }
    }

    if (currentHabitLoading) {
        return (
            <div className="container py-4">
                <Loader />
            </div>
        )
    }

    if (habitError) {
        return (
            <div className="container py-4">
                <div className="p-4 bg-red-100 text-red-700 rounded-lg">
                    {habitError}
                </div>
            </div>
        )
    }

    if (!currentHabit) {
        return (
            <div className="container py-4">
                <div className="p-4 bg-gray-100 text-gray-700 rounded-lg">
                    –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ <Link href="/habits">—Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–≤—ã—á–µ–∫</Link>
                </div>
            </div>
        )
    }

    return (
        <div className='container py-4 space-y-4'>
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ */}
            <div className='p-4 rounded-lg shadow-lg border'
                style={{ borderColor: currentHabit.color }}>
                <div className='space-y-3'>
                    <h1 className='text-2xl font-bold flex items-center'
                        style={{ color: currentHabit.color }}>
                        <span className='mr-2'>{currentHabit.icon}</span>
                        {currentHabit.title}
                    </h1>

                    {currentHabit.description && (
                        <p className='text-gray-600'>
                            {currentHabit.description}
                        </p>
                    )}

                    <div className='flex flex-wrap gap-4 text-sm text-gray-500'>
                        <div className='flex items-center'>
                            <FaCalendarAlt size={16} className='mr-2' />
                            <span className='font-medium'>
                                {getFrequencyText(currentHabit.frequency)}
                            </span>
                        </div>

                        <div className='flex items-center'>
                            <span className='font-medium'>
                                –¶–µ–ª—å: {getTargetText(currentHabit.targetValue, currentHabit.unit)}
                            </span>
                        </div>

                        <div className='flex items-center'>
                            <FaCircle
                                size={16}
                                className={`mr-2 ${currentHabit.isActive ? 'text-green-500' : 'text-red-500'}`}
                            />
                            <span className='font-medium'>
                                {getActiveStatusText(currentHabit.isActive)}
                            </span>
                        </div>
                    </div>

                    <div className='text-sm text-gray-500'>
                        <span className='font-medium'>
                            {getPeriodText(currentHabit.startDate, currentHabit.endDate)}
                        </span>
                    </div>

                    <div className='flex gap-2'>
                        <MyButton className='mt-2' onClick={() => router.push(`/habits/${currentHabit.id}/edit`)}>
                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
                        </MyButton>
                        <MyButton className='mt-2' onClick={() => setIsCreateEntry(true)}>
                            –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
                        </MyButton>
                    </div>
                </div>
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å streak */}
            <div className='grid grid-cols-1 lg:grid-cols-2 gap-4'>
                {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <div className='bg-white p-6 rounded-lg shadow-lg border'>
                    <h3 className='text-lg font-semibold mb-4 text-gray-800'>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <div className='grid grid-cols-3 gap-4'>
                        <div className='text-center'>
                            <div className='text-2xl font-bold text-orange-600'>üî•</div>
                            <div className='text-xl font-semibold text-gray-800'>{currentHabit.currentStreak}</div>
                            <div className='text-xs text-gray-500'>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è</div>
                        </div>
                        <div className='text-center'>
                            <div className='text-2xl font-bold text-green-600'>üëë</div>
                            <div className='text-xl font-semibold text-gray-800'>{currentHabit.longestStreak}</div>
                            <div className='text-xs text-gray-500'>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è</div>
                        </div>
                        <div className='text-center'>
                            <div className='text-2xl font-bold text-blue-600'>üìù</div>
                            <div className='text-xl font-semibold text-gray-800'>{currentHabit.totalEntries}</div>
                            <div className='text-xs text-gray-500'>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</div>
                        </div>
                    </div>
                </div>

                {/* –°—Ç–∞—Ç—É—Å –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è */}
                <div className='bg-white p-6 rounded-lg shadow-lg border'>
                    <h3 className='text-lg font-semibold mb-4 text-gray-800'>üéØ –°—Ç–∞—Ç—É—Å —Å–µ–≥–æ–¥–Ω—è</h3>
                    <div className='space-y-3'>
                        {/* –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
                        <div className='flex items-center justify-between'>
                            <span className='text-sm text-gray-600'>–°—Ç–∞—Ç—É—Å —Å–µ–≥–æ–¥–Ω—è:</span>
                            {(() => {
                                const isActive = isHabitCompletedToday(currentHabit.entries)
                                const isFullyCompleted = isHabitFullyCompletedToday(currentHabit.entries)

                                if (isFullyCompleted) {
                                    return (
                                        <span className='bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full text-sm font-semibold'>
                                            üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!
                                        </span>
                                    )
                                } else if (isActive) {
                                    return (
                                        <span className='bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm font-semibold'>
                                            üìà –í –ø—Ä–æ—Ü–µ—Å—Å–µ
                                        </span>
                                    )
                                } else {
                                    return (
                                        <span className='bg-orange-100 text-orange-700 px-3 py-1 rounded-full text-sm font-semibold'>
                                            ‚è∞ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                                        </span>
                                    )
                                }
                            })()}
                        </div>

                        {/* Streak —Å—Ç–∞—Ç—É—Å */}
                        {(() => {
                            const lastEntry = getLastHabitEntry(currentHabit.entries)
                            const streakStatus = getStreakStatus(currentHabit.currentStreak, lastEntry)
                            return (
                                <div className={`${streakStatus.color} p-3 bg-gray-50 rounded-lg`}>
                                    <div className='flex items-center gap-2 font-semibold'>
                                        <span className='text-lg'>{streakStatus.icon}</span>
                                        <span>{streakStatus.text}</span>
                                    </div>
                                </div>
                            )
                        })()}

                        {/* –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
                        <div className='bg-blue-50 p-3 rounded-lg'>
                            <div className='text-blue-700 font-medium text-sm'>
                                üí™ {getMotivationMessage(currentHabit.currentStreak)}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏–≤—ã—á–∫–∏ */}
            {!isCreateEntry && (
                < div className='space-y-4'>
                    <HabitCalendar
                        entries={currentHabit.entries}
                        habitTitle={currentHabit.title}
                        habitIcon={currentHabit.icon}
                        habitColor={currentHabit.color}
                        targetValue={currentHabit.targetValue}
                        unit={currentHabit.unit}
                        onDayClick={handleCalendarDayClick}
                        config={calendarConfig}
                        className="calendar-section"
                    />
                </div>)
            }

            {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ */}
            {
                isCreateEntry && (
                    <div className='space-y-4'>
                        <HabitEntryForm
                            habitId={currentHabit.id}
                            mode='create'
                            onClose={() => {
                                setIsCreateEntry(false)
                                setSelectedDate(null)
                            }}
                            onEntryUpdate={handleEntryUpdate}
                            currentHabit={currentHabit}
                            selectedDate={selectedDate}
                        />
                    </div>
                )
            }

            {/* –ó–∞–ø–∏—Å–∏ –ø—Ä–∏–≤—ã—á–∫–∏ */}
            <div className='bg-white rounded-lg shadow-lg border'>
                <div className='p-4 border-b'>
                    <div className='flex justify-between items-center'>
                        <h2 className='text-lg font-semibold'>–ó–∞–ø–∏—Å–∏ –ø—Ä–∏–≤—ã—á–∫–∏</h2>
                        <div className='text-sm text-gray-500'>
                            –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞–∑–∞–Ω–æ: {currentHabit.entries.length} | –í—Å–µ–≥–æ: {currentHabit.totalEntries}
                        </div>
                    </div>
                </div>

                <div className='p-4'>
                    {currentHabit.entries.length > 0 ? (
                        <div className='space-y-3'>
                            {currentHabit.entries.map((entry) => (
                                <div key={entry.id}
                                    className='p-4 border rounded-lg hover:shadow-md transition-shadow bg-gray-50'>
                                    <div className='flex justify-between items-start'>
                                        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                                        <div className='flex-1 space-y-2'>
                                            <div className='flex items-center gap-4'>
                                                <div className='flex items-center gap-2'>
                                                    <FaClock size={14} className='text-gray-400' />
                                                    <span className='font-medium text-gray-700'>
                                                        {formatDisplayDate(entry.date)}
                                                    </span>
                                                </div>

                                                <div className='flex items-center gap-3'>
                                                    <div className='flex items-center gap-2'>
                                                        <span className='font-semibold text-md' style={{ color: currentHabit.color }}>
                                                            {entry.value !== null && entry.value !== undefined ? entry.value : 0}
                                                        </span>
                                                        {currentHabit.targetValue && (
                                                            <span className='text-md '>
                                                                –∏–∑ {currentHabit.targetValue}
                                                            </span>
                                                        )}
                                                        <span className='text-sm text-gray-500'>
                                                            {getUnitText(currentHabit.unit)}
                                                        </span>
                                                    </div>

                                                    {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
                                                    {currentHabit.targetValue && currentHabit.targetValue > 0 && (
                                                        <div className='flex items-center gap-2'>
                                                            <div className='w-16 h-2 bg-gray-200 rounded-full overflow-hidden'>
                                                                <div
                                                                    className='h-full bg-current transition-all duration-300'
                                                                    style={{
                                                                        width: `${Math.min(((entry.value || 0) / currentHabit.targetValue) * 100, 100)}%`,
                                                                        color: currentHabit.color
                                                                    }}
                                                                />
                                                            </div>
                                                            <span className={`text-xs font-medium ${(entry.value || 0) >= currentHabit.targetValue ? 'text-green-600' : 'text-gray-600'}`}>
                                                                {Math.round(((entry.value || 0) / currentHabit.targetValue) * 100)}%
                                                            </span>
                                                        </div>
                                                    )}
                                                </div>

                                                <div className='flex items-center gap-1'>
                                                    <span className={`text-lg ${getMoodColor(entry.mood)}`}>
                                                        {getMoodEmoji(entry.mood)}
                                                    </span>
                                                    <span className={`text-sm font-medium ${getMoodColor(entry.mood)}`}>
                                                        {getMoodText(entry.mood)}
                                                    </span>
                                                </div>
                                            </div>

                                            {entry.note && (
                                                <div className='flex items-start gap-2 mt-2'>
                                                    <FaStickyNote size={14} className='text-gray-400 mt-1' />
                                                    <p className='text-sm text-gray-600 leading-relaxed'>
                                                        {entry.note}
                                                    </p>
                                                </div>
                                            )}
                                        </div>

                                        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                                        <div className='flex gap-2 ml-4'>

                                            <MyButton onClick={() => handleDeleteEntry(entry)} className='p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors'>
                                                <FaTrash size={14} />
                                            </MyButton>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <div className='text-center py-8'>
                            <div className='text-gray-400 mb-2'>
                                <FaStickyNote size={48} className='mx-auto' />
                            </div>
                            <h3 className='text-lg font-medium text-gray-600 mb-2'>
                                –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
                            </h3>
                            <p className='text-gray-500 mb-4'>
                                –ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É, –¥–æ–±–∞–≤–∏–≤ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
                            </p>
                            <MyButton onClick={() => setIsCreateEntry(true)}>
                                –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
                            </MyButton>
                        </div>
                    )}
                </div>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
            {deleteConfirm.isOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
                        <h3 className="text-lg font-semibold text-gray-800 mb-4">
                            –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                        </h3>
                        <p className="text-gray-600 mb-6">
                            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
                        </p>
                        {deleteConfirm.entry && (
                            <div className="bg-gray-50 p-3 rounded-lg mb-6">
                                <div className="text-sm text-gray-600">
                                    –î–∞—Ç–∞: <span className="font-medium">{formatDisplayDate(deleteConfirm.entry.date)}</span>
                                </div>
                                <div className="text-sm text-gray-600">
                                    –ó–Ω–∞—á–µ–Ω–∏–µ: <span className="font-medium">{deleteConfirm.entry.value}</span>
                                </div>
                                {deleteConfirm.entry.note && (
                                    <div className="text-sm text-gray-600">
                                        –ó–∞–º–µ—Ç–∫–∞: <span className="font-medium">{deleteConfirm.entry.note}</span>
                                    </div>
                                )}
                            </div>
                        )}
                        <div className="flex justify-end gap-3">
                            <MyButton
                                onClick={cancelDeleteEntry}
                                className="px-4 py-2 text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                            >
                                –û—Ç–º–µ–Ω–∞
                            </MyButton>
                            <MyButton
                                onClick={confirmDeleteEntry}
                                className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
                            >
                                –£–¥–∞–ª–∏—Ç—å
                            </MyButton>
                        </div>
                    </div>
                </div>
            )}
        </div >
    )
}
