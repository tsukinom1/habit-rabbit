'use client'
import HabitsForm from '@/components/habits/HabitsForm'
import { useHabit } from '@/hooks/useHabit'
import { useEffect, useState } from 'react'
import { FaCalendarAlt, FaCircle } from 'react-icons/fa'

export default function HabitsPage() {
    const [isEdit, setIsEdit] = useState<boolean>(false)
    const [expandedHabits, setExpandedHabits] = useState<Set<string>>(new Set())
    const { habits, refetch } = useHabit()

    const handleToggleExpand = (habitId: string) => {
        setExpandedHabits(prev => {
            const newSet = new Set(prev)
            if (newSet.has(habitId)) {
                newSet.delete(habitId)
            } else {
                newSet.add(habitId)
            }
            return newSet
        })
    }


    useEffect(() => {
        refetch()
    }, [isEdit])

    return (
        <div className='container py-4 space-y-4'>
            <h1 className='text-2xl font-bold' onClick={() => setIsEdit(true)}>–ü—Ä–∏–≤—ã—á–∫–∏</h1>
            {isEdit && <HabitsForm setIsEdit={setIsEdit} />}

            <div className='space-y-4'>
                {habits.map((habit, index) => (
                    <div key={habit.id} className='p-4 rounded-lg shadow-lg border cursor-pointer'
                        style={{ borderColor: habit.color }}
                        onClick={() => handleToggleExpand(habit.id)}>
                        <div className='space-y-1'>
                            <h2 className='text-lg font-bold flex items-center justify-between'
                                style={{ color: habit.color }}
                            >
                                <span className='text-subtext mr-1'>{habits.length - index}.
                                    {habit.icon} {habit.title}
                                </span>
                                <span className='text-sm hidden sm:block'>
                                    {expandedHabits.has(habit.id) ? '—Å–≤–µ—Ä–Ω—É—Ç—å üîΩ' : '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å ‚ñ∂Ô∏è'}
                                </span>
                            </h2>
                            <p className='text-md text-gray-500 flex items-center '>
                                <FaCalendarAlt size={20} className='inline-block mr-2' />
                                <span className='font-bold'> {habit.frequency === 'DAILY' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ' : habit.frequency === 'WEEKLY' ? '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ' : habit.frequency === 'MONTHLY' ? '–ï–∂–µ–º–µ—Å—è—á–Ω–æ' : habit.frequency}</span>
                                <span className='font-bold ml-1'>({habit.targetValue} {habit.unit === 'count' ? '—Ä–∞–∑' : habit.unit === 'minutes' ? '–º–∏–Ω—É—Ç' : habit.unit === 'hours' ? '—á–∞—Å–æ–≤' : habit.unit === 'days' ? '–¥–Ω–µ–π' : habit.unit === 'months' ? '–º–µ—Å—è—Ü–µ–≤' : habit.unit === 'meters' ? '–º–µ—Ç—Ä–æ–≤' : habit.unit === 'kilometers' ? '–∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤' : habit.unit === 'items' ? '—à—Ç—É–∫' : habit.unit === 'percent' ? '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤' : habit.unit === 'other' ? '–¥—Ä—É–≥–æ–µ' : habit.unit})</span>
                            </p>
                            <p className='text-md text-gray-500 flex items-center'>
                                <FaCircle size={20} className={`${habit.isActive ? 'text-success' : 'text-error'} inline-block mr-2`} />
                                <span className='font-bold'>{String(habit?.startDate || '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞').split('T')[0]} - </span>
                                <span className='font-bold ml-1'>{String(habit?.endDate || '–î–∞—Ç–∞ —Ñ–∏–Ω–∏—à–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞').split('T')[0]}</span>
                            </p>
                        </div>

                        {expandedHabits.has(habit.id) && (
                            <div className='mt-4 p-3 border-t'
                                style={{ borderColor: habit.color }}
                            >
                                <h1 className='text-lg font-bold'>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h1>
                                <p className='text-md'><b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {habit.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                                <p className='text-md'><b>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {habit.reminderTime || '–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                                <p className='text-md'><b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {String(habit?.createdAt || '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞').split('T')[0]}</p>
                                <p className='text-md'><b>–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {String(habit?.updatedAt || '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞').split('T')[0]}</p>
                                <p className='text-md'><b>–°—Ç–∞—Ç—É—Å:</b> {habit.isActive ? '–ê–∫—Ç–∏–≤–Ω–∞—è' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è'}</p>
                                <p className='text-md'><b>–ê—Ä—Ö–∏–≤–Ω–∞—è:</b> {habit.isArchived ? '–î–∞' : '–ù–µ—Ç'}</p>
                                <p className='text-md'><b>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> {habit.currentStreak || '0'}</p>
                                <p className='text-md'><b>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è:</b> {habit.longestStreak || '0'}</p>
                                <p className='text-md'><b>–ó–∞–º–µ—Ç–∫–∏:</b> {habit.entries.length || '–ó–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–≤—ã—á–∫–µ –Ω–µ—Ç'}</p>
                                {habit.entries.length > 0 && (
                                    <p className='text-md'><b>–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫ –æ –ø—Ä–∏–≤—ã—á–∫–µ:</b> {habit.totalEntries || '–ó–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–≤—ã—á–∫–µ –µ—â–µ –Ω–µ—Ç'}</p>
                                )}
                            </div>
                        )}
                    </div>
                ))}
            </div>

        </div >
    )
}
