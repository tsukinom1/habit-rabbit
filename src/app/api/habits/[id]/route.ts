import { authOptions } from "@/lib/auth"
import { prisma } from "@/lib/prisma"
import { getServerSession } from "next-auth"
import { NextResponse } from "next/server"

async function getUserProfile(userId: string) {
    return await prisma.profile.findFirst({
        where: { userId },
        select: { id: true }
    })
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function validateHabitOwnership(habitId: string, profileId: string) {
    const habit = await prisma.habit.findFirst({
        where: {
            id: habitId,
            profileId: profileId
        }
    })
    return habit
}

// GET /api/habits/[id] - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
export async function GET(
    request: Request,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const { id } = await params
        const session = await getServerSession(authOptions)
        if (!session?.user?.id) {
            return NextResponse.json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, { status: 401 })
        }

        const profile = await getUserProfile(session.user.id)
        if (!profile) {
            return NextResponse.json({ error: "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 })
        }

        const habit = await prisma.habit.findFirst({
            where: {
                id: id,
                profileId: profile.id
            },
            include: {
                entries: {
                    orderBy: { date: 'desc' }
                    // –£–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
                }
            }
        })

        if (!habit) {
            return NextResponse.json({ error: "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }, { status: 404 })
        }

        return NextResponse.json(habit, { status: 200 })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error)
        return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 })
    }
}

// PUT /api/habits/[id] - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
export async function PUT(
    request: Request,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const { id } = await params
        const session = await getServerSession(authOptions)
        if (!session?.user?.id) {
            return NextResponse.json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, { status: 401 })
        }

        const profile = await getUserProfile(session.user.id)
        if (!profile) {
            return NextResponse.json({ error: "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 })
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤—ã—á–∫–µ
        const habit = await validateHabitOwnership(id, profile.id)
        if (!habit) {
            return NextResponse.json({ error: "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞" }, { status: 404 })
        }

        const body = await request.json()

        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const allowedFields: any = {}

        if (body.title !== undefined) {
            if (!body.title || body.title.trim() === '') {
                return NextResponse.json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" }, { status: 400 })
            }
            allowedFields.title = body.title.trim()
        }

        if (body.description !== undefined) {
            allowedFields.description = body.description?.trim() || null
        }

        if (body.icon !== undefined) {
            allowedFields.icon = body.icon || 'üéØ'
        }

        if (body.color !== undefined) {
            allowedFields.color = body.color && /^#[0-9A-F]{6}$/i.test(body.color) ? body.color : '#3B82F6'
        }

        if (body.frequency !== undefined) {
            const validFrequencies = ['DAILY', 'WEEKLY', 'MONTHLY', 'CUSTOM']
            if (!validFrequencies.includes(body.frequency)) {
                return NextResponse.json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞" }, { status: 400 })
            }
            allowedFields.frequency = body.frequency
        }

        if (body.targetValue !== undefined) {
            allowedFields.targetValue = body.targetValue ? Number(body.targetValue) : null
        }

        if (body.unit !== undefined) {
            allowedFields.unit = body.unit || null
        }

        if (body.reminderTime !== undefined) {
            allowedFields.reminderTime = body.reminderTime || null
        }

        if (body.startDate !== undefined) {
            allowedFields.startDate = new Date(body.startDate)
        }

        if (body.endDate !== undefined) {
            allowedFields.endDate = body.endDate ? new Date(body.endDate) : null
        }

        if (body.isActive !== undefined) {
            allowedFields.isActive = Boolean(body.isActive)
        }

        if (body.isArchived !== undefined) {
            allowedFields.isArchived = Boolean(body.isArchived)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É
        const updatedHabit = await prisma.habit.update({
            where: { id: id },
            data: {
                ...allowedFields,
                updatedAt: new Date()
            },
            include: {
                entries: {
                    orderBy: { date: 'desc' }
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                }
            }
        })

        return NextResponse.json(updatedHabit, { status: 200 })

    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error)

        if (error?.code === 'P2025') {
            return NextResponse.json({
                error: "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }, { status: 404 })
        }

        return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 })
    }
}

// DELETE /api/habits/[id] - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
export async function DELETE(
    request: Request,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const { id } = await params
        const session = await getServerSession(authOptions)
        if (!session?.user?.id) {
            return NextResponse.json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, { status: 401 })
        }

        const profile = await getUserProfile(session.user.id)
        if (!profile) {
            return NextResponse.json({ error: "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 })
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤—ã—á–∫–µ
        const habit = await validateHabitOwnership(id, profile.id)
        if (!habit) {
            return NextResponse.json({ error: "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞" }, { status: 404 })
        }

        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ cascade)
        await prisma.$transaction(async (tx) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const entriesCount = await tx.habitEntry.count({
                where: { habitId: id }
            })

            // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É (–∑–∞–ø–∏—Å–∏ —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            await tx.habit.delete({
                where: { id: id }
            })

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
            await tx.profile.update({
                where: { id: profile.id },
                data: {
                    totalHabits: { decrement: 1 }
                }
            })
        })

        return NextResponse.json({ message: "–ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞" }, { status: 200 })

    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error)

        if (error?.code === 'P2025') {
            return NextResponse.json({
                error: "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }, { status: 404 })
        }

        return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 })
    }
}
