import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { 
  sendDailyGreeting, 
  sendHabitReminder, 
  sendStreakWarning,
  sendAchievementNotification,
  getUsersWithActiveSubscriptions,
  isTimeToSend 
} from '@/utils/notificationUtils'

export async function POST(request: NextRequest) {
  try {
    console.log('üïê Notification scheduler started at', new Date().toISOString())
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    const subscriptions = await getUsersWithActiveSubscriptions()
    console.log(`üìã Found ${subscriptions.length} users with active subscriptions`)

    let totalSent = 0
    let totalFailed = 0

    for (const subscription of subscriptions) {
      const user = subscription.user
      if (!user?.profile) continue

      const userId = user.id
      const profile = user.profile
      
      console.log(`üë§ Processing user ${userId}`)

      // 1. –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø
      if (subscription.isActive) {
        const greetingTime = subscription.reminderTime || '10:00'
        const userTimezone = profile.timezone || 'UTC'
        
        if (isTimeToSend(greetingTime, userTimezone, 2)) { // 2 –º–∏–Ω—É—Ç—ã —Ç–æ–ª–µ—Ä–∞–Ω—Å
          console.log(`üåÖ Sending daily greeting to user ${userId} at ${greetingTime}`)
          
          const result = await sendDailyGreeting(userId)
          totalSent += result.sent
          totalFailed += result.failed
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 100))
        }
      }

      // 2. –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –û –ü–†–ò–í–´–ß–ö–ê–•
      if (subscription.habitReminders && profile.habits) {
        for (const habit of profile.habits) {
          if (!habit.reminderTime || !habit.isActive) continue
          
          if (isTimeToSend(habit.reminderTime, profile.timezone || 'UTC', 2)) {
            console.log(`‚è∞ Sending habit reminder for "${habit.title}" to user ${userId}`)
            
            const result = await sendHabitReminder(habit.id, userId, habit.title)
            totalSent += result.sent
            totalFailed += result.failed
            
            await new Promise(resolve => setTimeout(resolve, 100))
          }
        }
      }

      // 3. STREAK –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø
      if (subscription.streakBreaking && profile.habits) {
        for (const habit of profile.habits) {
          if (!habit.isActive) continue
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
          const today = new Date()
          today.setHours(0, 0, 0, 0)
          
          const todayEntry = await prisma.habitEntry.findFirst({
            where: {
              habitId: habit.id,
              date: {
                gte: today,
                lt: new Date(today.getTime() + 24 * 60 * 60 * 1000)
              }
            }
          })

          // –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –µ—Å—Ç—å streak –±–æ–ª—å—à–µ 3 –¥–Ω–µ–π
          if (!todayEntry && habit.currentStreak >= 3) {
            const currentHour = new Date().getHours()
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–µ—á–µ—Ä–æ–º (18:00-22:00)
            if (currentHour >= 18 && currentHour <= 22) {
              console.log(`üî• Sending streak warning for "${habit.title}" (${habit.currentStreak} days) to user ${userId}`)
              
              const result = await sendStreakWarning(userId, habit.title, habit.currentStreak)
              totalSent += result.sent
              totalFailed += result.failed
              
              await new Promise(resolve => setTimeout(resolve, 100))
            }
          }
        }
      }

      // 4. –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
      if (subscription.achievements && profile.habits) {
        for (const habit of profile.habits) {
          if (!habit.isActive) continue
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º milestone –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          const { currentStreak, longestStreak } = habit
          
          // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ streak
          if (currentStreak > 0 && shouldCelebrateStreak(currentStreak)) {
            console.log(`üèÜ Sending achievement notification for ${currentStreak} day streak to user ${userId}`)
            
            const achievement = getStreakAchievementMessage(currentStreak)
            const result = await sendAchievementNotification(
              userId, 
              achievement.title, 
              achievement.description
            )
            totalSent += result.sent
            totalFailed += result.failed
            
            await new Promise(resolve => setTimeout(resolve, 100))
          }
        }
      }
    }

    console.log(`‚úÖ Scheduler completed. Sent: ${totalSent}, Failed: ${totalFailed}`)

    return NextResponse.json({
      success: true,
      processed: subscriptions.length,
      sent: totalSent,
      failed: totalFailed,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('‚ùå Error in notification scheduler:', error)
    return NextResponse.json(
      { error: 'Scheduler failed', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Å streak
function shouldCelebrateStreak(streak: number): boolean {
  // –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–∞–∂–Ω—ã—Ö milestone
  const milestones = [3, 7, 14, 21, 30, 50, 100, 365]
  return milestones.includes(streak)
}

// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
function getStreakAchievementMessage(streak: number): { title: string; description: string } {
  if (streak === 3) {
    return {
      title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏! üéØ',
      description: '3 –¥–Ω—è –ø–æ–¥—Ä—è–¥! –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
    }
  } else if (streak === 7) {
    return {
      title: '–ù–µ–¥–µ–ª—è —É—Å–ø–µ—Ö–∞! üìÖ',
      description: '–¶–µ–ª–∞—è –Ω–µ–¥–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏.'
    }
  } else if (streak === 14) {
    return {
      title: '–î–≤–µ –Ω–µ–¥–µ–ª–∏ —Å–∏–ª—ã! üí™',
      description: '14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —á–∞—Å—Ç—å—é —Ç–µ–±—è.'
    }
  } else if (streak === 21) {
    return {
      title: '–ü—Ä–∏–≤—ã—á–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞! üèóÔ∏è',
      description: '21 –¥–µ–Ω—å ‚Äî –Ω–∞—É—á–Ω–æ –¥–æ–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏!'
    }
  } else if (streak === 30) {
    return {
      title: '–ú–µ—Å—è—Ü –ø–æ–±–µ–¥—ã! üåü',
      description: '–¶–µ–ª—ã–π –º–µ—Å—è—Ü! –¢—ã –¥–æ–∫–∞–∑–∞–ª, —á—Ç–æ –º–æ–∂–µ—à—å –≤—Å—ë —á—Ç–æ —É–≥–æ–¥–Ω–æ!'
    }
  } else if (streak === 50) {
    return {
      title: '–ü–æ–ª—É–≤–µ–∫–æ–≤–æ–π —Ä—É–±–µ–∂! üéä',
      description: '50 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞!'
    }
  } else if (streak === 100) {
    return {
      title: '–°–æ—Ç–Ω—è –¥–Ω–µ–π! üíØ',
      description: '100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –¢—ã –ª–µ–≥–µ–Ω–¥–∞ —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã!'
    }
  } else if (streak === 365) {
    return {
      title: '–¶–ï–õ–´–ô –ì–û–î! üéÜ',
      description: '365 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –¢—ã –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ—é –∂–∏–∑–Ω—å –Ω–∞–≤—Å–µ–≥–¥–∞!'
    }
  }
  
  return {
    title: `${streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! üî•`,
    description: '–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ü–µ–ª–∏!'
  }
} 