import webpush from 'web-push'
import { prisma } from '@/lib/prisma'

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VAPID –∫–ª—é—á–µ–π
const vapidEmail = process.env.VAPID_EMAIL || 'dlyattnavern@gmail.com'
const formattedEmail = vapidEmail.startsWith('mailto:') ? vapidEmail : `mailto:${vapidEmail}`

webpush.setVapidDetails(
  formattedEmail,
  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || '',
  process.env.VAPID_PRIVATE_KEY || ''
)

export type NotificationType = 
  | 'DAILY_GREETING'     // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  | 'HABIT_REMINDER'     // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ
  | 'STREAK_WARNING'     // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ streak
  | 'ACHIEVEMENT'        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  | 'WEEKLY_SUMMARY'     // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞

export interface NotificationPayload {
  title: string
  body: string
  type: NotificationType
  data?: {
    url?: string
    habitId?: string
    userId?: string
    [key: string]: any
  }
}

// –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
const DAILY_GREETINGS = [
  {
    title: 'üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!',
    body: '–ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.'
  },
  {
    title: '‚òÄÔ∏è –ü—Ä–∏–≤–µ—Ç, —á–µ–º–ø–∏–æ–Ω!',
    body: '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏. –ù–∞—á–Ω–∏ —Å –º–∞–ª–æ–≥–æ!'
  },
  {
    title: 'üí™ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!',
    body: '–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —É—Å–∏–ª–∏–π. –ß—Ç–æ —Å–¥–µ–ª–∞–µ—à—å —Å–µ–≥–æ–¥–Ω—è?'
  },
  {
    title: 'üéØ –ù–æ–≤—ã–π –¥–µ–Ω—å, –Ω–æ–≤—ã–µ –ø–æ–±–µ–¥—ã!',
    body: '–ü—Ä–∏–≤—ã—á–∫–∏ —Å—Ç—Ä–æ—è—Ç –±—É–¥—É—â–µ–µ. –ö–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É –≤—ã–ø–æ–ª–Ω–∏—à—å –ø–µ—Ä–≤–æ–π?'
  },
  {
    title: 'üöÄ –ü–æ–µ—Ö–∞–ª–∏!',
    body: '–¢–≤–æ–π –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!'
  }
]

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
export function getRandomGreeting(): { title: string; body: string } {
  return DAILY_GREETINGS[Math.floor(Math.random() * DAILY_GREETINGS.length)]
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export async function sendNotificationToUser(
  userId: string, 
  payload: NotificationPayload
): Promise<{ success: boolean; sent: number; failed: number }> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const subscriptions = await prisma.pushSubscription.findMany({
      where: {
        userId: userId,
        isActive: true
      }
    })

    if (subscriptions.length === 0) {
      console.log(`No active subscriptions for user ${userId}`)
      return { success: false, sent: 0, failed: 0 }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const results = await Promise.allSettled(
      subscriptions.map(async (subscription) => {
        const pushSubscription = {
          endpoint: subscription.endpoint,
          keys: {
            p256dh: subscription.p256dh,
            auth: subscription.auth
          }
        }

        return webpush.sendNotification(
          pushSubscription,
          JSON.stringify(payload)
        )
      })
    )

    const successful = results.filter(result => result.status === 'fulfilled').length
    const failed = results.filter(result => result.status === 'rejected').length

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    results.forEach((result, index) => {
      if (result.status === 'rejected') {
        console.error(`Failed to send notification to subscription ${index}:`, result.reason)
      }
    })

    return { success: true, sent: successful, failed }
    
  } catch (error) {
    console.error('Error sending notification to user:', error)
    return { success: false, sent: 0, failed: 1 }
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
export async function sendDailyGreeting(userId: string) {
  const greeting = getRandomGreeting()
  
  const payload: NotificationPayload = {
    title: greeting.title,
    body: greeting.body,
    type: 'DAILY_GREETING',
    data: {
      url: '/habits',
      userId: userId,
      timestamp: new Date().toISOString()
    }
  }

  return sendNotificationToUser(userId, payload)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ
export async function sendHabitReminder(habitId: string, userId: string, habitTitle: string) {
  const payload: NotificationPayload = {
    title: `‚è∞ –í—Ä–µ–º—è –¥–ª—è "${habitTitle}"`,
    body: '–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É! –ú–æ–∂–µ—à—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å.',
    type: 'HABIT_REMINDER',
    data: {
      url: `/habits/${habitId}`,
      habitId: habitId,
      userId: userId
    }
  }

  return sendNotificationToUser(userId, payload)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ streak
export async function sendStreakWarning(userId: string, habitTitle: string, currentStreak: number) {
  const payload: NotificationPayload = {
    title: `üî• –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! Streak –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π`,
    body: `–£ —Ç–µ–±—è ${currentStreak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å "${habitTitle}". –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–π —Å–µ—Ä–∏—é!`,
    type: 'STREAK_WARNING',
    data: {
      url: '/habits',
      userId: userId,
      habitTitle: habitTitle,
      currentStreak: currentStreak
    }
  }

  return sendNotificationToUser(userId, payload)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
export async function sendAchievementNotification(
  userId: string, 
  achievement: string, 
  description: string
) {
  const payload: NotificationPayload = {
    title: `üèÜ ${achievement}`,
    body: description,
    type: 'ACHIEVEMENT',
    data: {
      url: '/habits',
      userId: userId,
      achievement: achievement
    }
  }

  return sendNotificationToUser(userId, payload)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
export async function getUsersWithActiveSubscriptions() {
  return prisma.pushSubscription.findMany({
    where: {
      isActive: true
    },
    include: {
      user: {
        include: {
          profile: {
            select: {
              timezone: true,
              habits: {
                where: {
                  isActive: true
                },
                select: {
                  id: true,
                  title: true,
                  reminderTime: true,
                  isActive: true,
                  currentStreak: true,
                  longestStreak: true
                }
              }
            }
          }
        }
      }
    }
  })
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export function shouldSendNotificationAtTime(targetTime: string): boolean {
  const now = new Date()
  const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`
  return currentTime === targetTime
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)
export function isTimeToSend(targetTime: string, timezone: string = 'UTC', toleranceMinutes: number = 1): boolean {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const now = new Date()
    const userTime = new Intl.DateTimeFormat('en-US', {
      timeZone: timezone,
      hour12: false,
      hour: '2-digit',
      minute: '2-digit'
    }).format(now)
    
    const [currentHour, currentMinute] = userTime.split(':').map(Number)
    const [targetHour, targetMinute] = targetTime.split(':').map(Number)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    if (isNaN(targetHour) || isNaN(targetMinute) || targetHour < 0 || targetHour > 23 || targetMinute < 0 || targetMinute > 59) {
      console.warn(`Invalid time format: ${targetTime}`)
      return false
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
    const currentTotalMinutes = currentHour * 60 + currentMinute
    const targetTotalMinutes = targetHour * 60 + targetMinute
    
    const diffMinutes = Math.abs(currentTotalMinutes - targetTotalMinutes)
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:59 –∏ 00:01)
    const diffMinutesAcrossMidnight = Math.abs(diffMinutes - (24 * 60))
    
    const finalDiff = Math.min(diffMinutes, diffMinutesAcrossMidnight)
    
    console.log(`Time check (${timezone}): current=${currentHour}:${currentMinute.toString().padStart(2, '0')}, target=${targetTime}, diff=${finalDiff}min, tolerance=${toleranceMinutes}min`)
    
    return finalDiff <= toleranceMinutes
    
  } catch (error) {
    console.error(`Error checking time for timezone ${timezone}:`, error)
    // Fallback to server time
    const now = new Date()
    const currentHour = now.getHours()
    const currentMinute = now.getMinutes()
    const [targetHour, targetMinute] = targetTime.split(':').map(Number)
    
    if (isNaN(targetHour) || isNaN(targetMinute)) return false
    
    const currentTotalMinutes = currentHour * 60 + currentMinute
    const targetTotalMinutes = targetHour * 60 + targetMinute
    const diffMinutes = Math.abs(currentTotalMinutes - targetTotalMinutes)
    const finalDiff = Math.min(diffMinutes, Math.abs(diffMinutes - (24 * 60)))
    
    console.log(`Time check (fallback): current=${currentHour}:${currentMinute.toString().padStart(2, '0')}, target=${targetTime}, diff=${finalDiff}min`)
    
    return finalDiff <= toleranceMinutes
  }
} 